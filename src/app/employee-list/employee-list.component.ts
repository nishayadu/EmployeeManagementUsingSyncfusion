import { Component, OnInit,ViewEncapsulation, ViewChild } from '@angular/core';
import { EJComponents } from 'ej-angular2';
import { EmployeeService } from '../employee.service';
import { Employee } from '../employee';
import { ActivitylogService } from '../activitylog.service';
import { NgForm } from '@angular/forms';

@Component({
  selector: 'app-employee-list',
  templateUrl: './employee-list.component.html',
  styleUrls: ['./employee-list.component.css']
})
export class EmployeeListComponent implements OnInit {

  /* Variable Initialization */
  public employee: Employee[] = [];
  public emp_array: Employee[] = [];
  public getemployeedetail: any[] = [];
  public employee_id: string = "";
  public ename: string = "";
  public designation: string = "";
  public value: string = "";
  public salary: number = 0;
  resize: boolean;
  button_display: boolean;
  actionbuttons: any;
  enablemodal: boolean;
  responsive:boolean;

  @ViewChild('dialog') dialog: EJComponents <any,any>;
  @ViewChild('dialogdelete') dialogdelete: EJComponents <any,any>;
  @ViewChild('dialogactivity') dialogactivity: EJComponents <any,any>;
  @ViewChild('editdialog') editdialog: EJComponents <any,any>;

  public dept: any[];
  
  fieldsvalues: Object;
  public toolbarItems;
  public editSettings;
    constructor(private _empserviceobj:EmployeeService, private _empobj:EmployeeService,private _activitylog: ActivitylogService) {
    this.button_display = false;
    this.actionbuttons = ["close", "maximize", "minimize"];
    this.enablemodal = true;
    this.resize=true;
    this.responsive=true;
   

    this.dept = [
      { id: 1, name: 'Products' },
      { id: 2, name: 'Professional Service' },
      { id: 3, name: 'Sales' },
      { id: 4, name: 'Support' }
    ];
  this.fieldsvalues = { dataSource: this.dept,  text: 'name', value: 'name' };
  this.editSettings = { allowEditing: true, allowAdding: true, allowDeleting: true,editMode : "dialog" };
  
	//this.toolbarItems={ showToolbar : true, toolbarItems : [ "edit"]};
  this.htmlattributes={
    class: "my-class", style: "border:1px solid red"
}
  }

  

  ngOnInit() {
    this.getEmployees();
  }

  htmlattributes:object;
  @ViewChild('formadd') formadd : NgForm;
  //Button click event handler to open the ejDialog
  onClick(event) {
   this.button_display = false;
   this.formadd.reset();
   this.dialog.widget.element.ejDialog('open');
   this.randomIntFromInterval(9999,1000);
  


  }
  //Dialog close event handler
  onClose(event) {
    this.button_display = true;
  }

  /*To get Employee Record*/
  public getEmployees() {
   this.employee = this._empserviceobj.GetEmployee();
  }

  /* Autogenerated Id for Employees */

  public randId: number;
  public randomstring: string;
  public randomIntFromInterval(min, max) {
  this.randId = Math.floor(Math.random() * (max - min + 1) + min);
  this.randomstring = 'K' + this.randId;

  }

  /* Add new Employee Record */
  public addemp(): void {
    var emp_obj: any = [];
    emp_obj.employee_id = this.randomstring;
    emp_obj.ename = this.ename;
    emp_obj.designation = this.designation;
    emp_obj.department = this.value;
    emp_obj.salary = this.salary;
    this._empobj.AddEmp(emp_obj);
    this.clearfields();
    this.dialog.widget.element.ejDialog('close');
  }
  
   /* Remove Employee Data from the List */
   public saveid:string;
   public clickdelete(employee_id: string):void
   {
    this.saveid =employee_id;
    this.dialogdelete.widget.element.ejDialog('open'); 
   }
  /* Remove Employee Data from the List */
   public removeemp(): void {
     
       this._empobj.RemoveEmp(this.saveid);
       this.dialogdelete.widget.element.ejDialog('close');
  }

  
  /* Clear the fields after each Operation */
  public clearfields(): void {
    this.employee_id = "";
    this.ename = "";
    this.designation = "";
    this.value = "";
    this.salary = 0;
    
  }
/*Close Add Dialog while Closing*/
 public closeaddpopup(event)
  {
    this.dialog.widget.element.ejDialog('close')
  }

  /*Get Activity Log of Employee Data*/
  public getactivity(event)
  {
    this.dialogactivity.widget.element.ejDialog('open')
  }

  /*Close Activity Dialog while Closing*/
  public clickcloseactivity()
  {
    this.dialogactivity.widget.element.ejDialog('close');
    
  }
  /* Get Employee Record for Edit */
  public selectItem(n: string): void {
    this.editdialog.widget.element.ejDialog('open');
    let index: number = 0;
    index = this.employee.findIndex(x => x.employee_id == n);
    let obj = this.employee[index];
    this.employee_id = obj.employee_id;
    this.ename = obj.ename;
    this.value = obj.department;
    this.designation = obj.designation;
    this.salary = obj.salary;
    
  }

  /* To edit employee details from Employee List */
  public updateitem()
  {  
    this._empobj.EditEmp(this.employee_id,this.ename,this.value,this.designation,this.salary);
    
  }
}
